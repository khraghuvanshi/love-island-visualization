[{"C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\pages\\home\\index.tsx":"1","C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\pages\\index.tsx":"2","C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\pages\\_app.tsx":"3","C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\components\\graphs\\ForceGraph.tsx":"4"},{"size":1185,"mtime":1751874620819,"results":"5","hashOfConfig":"6"},{"size":48,"mtime":1751846860358,"results":"7","hashOfConfig":"6"},{"size":188,"mtime":1751846860345,"results":"8","hashOfConfig":"6"},{"size":10235,"mtime":1751929900345,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"dlqjzi",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},"C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\pages\\home\\index.tsx",[],[],"C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\pages\\index.tsx",[],[],"C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\pages\\_app.tsx",[],[],"C:\\Users\\rkhus\\OneDrive\\Desktop\\love-island-visualizations-main\\components\\graphs\\ForceGraph.tsx",["23"],[],"import {\n  DragEvent,\n  DragEventHandler,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { data } from \"../../data\";\nimport * as d3 from \"d3\";\nimport { linkType, nodeType, simulationLinkType } from \"../../types\";\nimport { color, DragBehavior, Simulation, SimulationNodeDatum } from \"d3\";\nimport { useWindowSize } from \"../../utils/useWindowSize\";\n\nexport const ForceGraph = () => {\n  const svgRef = useRef(null);\n  const graphRef = useRef(null);\n  const legendRef = useRef(null);\n  const coupleLegendRef = useRef(null);\n  const { width, height } = useWindowSize();\n  // const [width, setWidth] = useState(960)\n  // const [height, setHeight] = useState(500)\n  //@ts-ignore\n  const centre_x = width / 2;\n  //@ts-ignore\n  const centre_y = height / 2;\n  const colorScale = d3\n    .scaleOrdinal(d3.schemeSet3)\n    //@ts-ignore\n    .domain([...new Set(data.nodes.map((d) => d.group))]);\n\n  const linkScale = d3\n    .scaleOrdinal(d3.schemeCategory10)\n    //@ts-ignore\n    .domain([...new Set(data.links.map((d) => d.day))]);\n  // const colorScale = [\n  //   \"red\",\n  //   \"green\",\n  //   \"blue\",\n  //   \"gold\",\n  //   \"orange\",\n  //   \"pink\",\n  //   \"yellow\",\n  //   \"purple\",\n  //   \"black\"\n  // ];\n\n  useEffect(() => {\n    if (!width || !height) return;\n    const svg = d3\n      .select(svgRef.current)\n      .attr(\"preserveAspectRatio\", \"none\")\n      // .attr(\"viewbox\", [0, 0, width * 1.2, height * 1.2]);\n      .attr(\"viewBox\", `0 0 ${width * 1.2} ${height * 1.2}`);\n\n\n    const graph = d3.select(graphRef.current);\n\n    const defs = svg.append(\"defs\");\n    defs\n      .selectAll(\"marker\")\n      .data([\"node\"])\n      .enter()\n      .append(\"marker\")\n      .attr(\"id\", function (d) {\n        return d;\n      })\n      .attr(\"viewBox\", \"0 -2.5 5 5\")\n      .attr(\"refX\", 5)\n      .attr(\"refY\", 0)\n      .attr(\"markerWidth\", 5)\n      .attr(\"markerHeight\", 5)\n      .attr(\"orient\", \"auto\")\n      .append(\"path\")\n      .attr(\"d\", \"M0,-2.5L5,0L0,2.5\")\n      .attr(\"fill\", \"#999\");\n\n    // const links = data.links.map(d => Object.create(d))\n\n    // links.forEach((d, i )=> {\n    //   d.source = data.links[i].source\n    //   d.target = data.links[i].target\n    // })\n    const links = data.links;\n    const nodes: SVGSVGElement | any = data.nodes;\n\n    const simulation = d3\n      .forceSimulation(nodes)\n      .force(\n        \"link\",\n        d3\n          .forceLink(links)\n          .id((d: any) => d.id)\n          .distance(90)\n      )\n      .force(\"charge\", d3.forceManyBody().strength(-350).distanceMax(150))\n      .force(\"collision\", d3.forceCollide().radius(24))\n      .force(\"center\", d3.forceCenter(centre_x, centre_y));\n\n    // const drag = simulation => {\n    //   const dragStarted = (event, d) => {\n    //     if(!event.active) simulation.alphaTarget(0.3).restart()\n    //     event.suvject.fx = event.subject\n\n    //   }\n    // }\n    const drag = (simulation: any) => {\n      function dragstarted(event: any) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        event.subject.fx = event.subject.x;\n        event.subject.fy = event.subject.y;\n        const id = event.subject.id;\n        //@ts-ignore\n        const relationships = data.links.filter((d) => d.source.id === id);\n        relationships.forEach((d) => {\n          const relationshipLine = d3.select(\n            //@ts-ignore\n            `#${d.source.id}-${d.target.id} text`\n          );\n          relationshipLine.attr(\"display\", \"block\");\n        });\n      }\n      function dragged(event: any) {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n      function dragended(event: any) {\n        if (!event.active) simulation.alphaTarget(0);\n        event.subject.fx = null;\n        event.subject.fy = null;\n        //   event.subject.fixed = true;\n        const id = event.subject.id;\n        //@ts-ignore\n        const relationships = data.links.filter((d) => d.source.id === id);\n        relationships.forEach((d) => {\n          const relationshipLine = d3.select(\n            //@ts-ignore\n            `#${d.source.id}-${d.target.id} text`\n          );\n          relationshipLine.attr(\"display\", \"none\");\n        });\n      }\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    };\n\n    const link = graph\n      .append(\"g\")\n      .selectAll(\"g\")\n      .data(links)\n      .join(\"g\")\n      //@ts-ignore\n      .attr(\"id\", (d) => `${d.source.id}-${d.target.id}`);\n\n    const linkText = link\n      .append(\"text\")\n      .text((d) => `Coupled on day ${d.day}`)\n      .attr(\"font-size\", 10)\n      .attr(\"display\", \"none\")\n      .attr(\"text-align\", \"middle\")\n      .attr(\"transform\", \"translate(-30,0)\");\n\n    const linkLines = link\n      .append(\"line\")\n      .attr(\"id\", (d) => \"id\")\n      .attr(\"stroke\", (d: any) => {\n        return linkScale(d.day);\n      })\n      .attr(\"width\", \"4px\");\n\n    const node = graph\n      .append(\"g\")\n      .attr(\"class\", \"node\")\n      .selectAll(\"g\")\n      .data(nodes)\n      .join(\"g\");\n\n    // .attr(\"r\", 12)\n    // .attr(\"fill\", (d) => colorScale[d.group])\n\n    //@ts-ignore\n    node.call(drag(simulation));\n\n    // const circles = node\n    //   .append(\"circle\")\n    //   .attr(\"cx\", (d: any) => d.x)\n    //   .attr(\"cy\", (d: any) => d.y)\n    //   .attr(\"r\", 12)\n    //   .attr(\"fill\", (d: any) => colorScale[d.group])\n    const circles = node.append(\"g\");\n\n    const clip = circles\n      .append(\"clipPath\")\n      .attr(\"id\", (d: unknown) => `clipCircle-${(d as nodeType).id}`)\n      .append(\"circle\")\n      .attr(\"r\", 16)\n      .attr(\"transform\", \"translate(18,16)\");\n\n    const circleStroke = circles\n      .append(\"circle\")\n      .attr(\"r\", 16)\n      .attr(\"transform\", \"translate(2,0)\")\n      .attr(\"stroke\", (d: any) => colorScale(d.group))\n      .attr(\"stroke-width\", 4);\n\n    const clipImg = circles\n      .append(\"svg:image\")\n      .attr(\"width\", 36)\n      .attr(\"height\", 36)\n      .attr(\"xlink:href\", (d: any) => `/headshots/${d.image}`)\n      // .attr(\"clip-path\",(d: any) => `url(#clipCircle-${d.id})`)\n      .attr(\"clip-path\", (d: unknown) => `url(#clipCircle-${(d as nodeType).id})`)\n      .attr(\"transform\", \"translate(-16,-16)\");\n\n    const texts = node\n      .append(\"text\")\n      .text((d: any) => {\n        return `${d.id.split(\"-\").join(\" \")}`;\n      })\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"transform\", \"translate(0,32)\")\n\n      .attr(\"font-size\", 5);\n\n    simulation.on(\"tick\", () => {\n      linkText\n        .attr(\"x\", (d: any) => {\n          return (d.source.x + d.target.x) / 2;\n        })\n        .attr(\"y\", (d: any) => (d.source.y + d.target.y) / 2);\n      // .attr(\"transform\", (d: any) => {\n      //   var a2 = Math.atan2(d.source.y, d.source.x);\n      //   var a1 = Math.atan2(d.target.y, d.target.x);\n      //   var sign = a1 > a2 ? 1 : -1;\n      //   var angle = a1 - a2;\n      //   var K = -sign * Math.PI * 2;\n      //   var angle = Math.abs(K + angle) < Math.abs(angle) ? K + angle : angle;\n\n      //   angle *= 180/Math.PI // rads to degs\n\n      //   return `rotate(${angle})`;\n      // });\n\n      linkLines\n        .attr(\"x1\", (d: any) => d.source.x)\n        .attr(\"y1\", (d: any) => d.source.y)\n        .attr(\"x2\", (d: any) => d.target.x)\n        .attr(\"y2\", (d: any) => d.target.y);\n      node.attr(\"transform\", (d: any) => `translate(${d.x},${d.y})`);\n    });\n\n    const handleZoom = (e: any) => {\n      d3.select(graphRef.current).attr(\"transform\", e.transform);\n    };\n\n    const zoom = d3\n      .zoom<SVGSVGElement | any, unknown>()\n      .scaleExtent([0.5, 2])\n      .on(\"zoom\", handleZoom);\n\n    svg.call(zoom);\n  }, [width, height]);\n\n  return (\n    <svg ref={svgRef} width=\"100%\" height={height || 500}>\n      {/* {data[\"nodes\"].map((d, i) => (\n        <circle cx={12 * i} cy={20} r={8} fill=\"red\"></circle>\n      ))} */}\n      <g ref={graphRef} transform=\"translate(100,0)\" />\n      {/* <g ref={legendRef} /> */}\n      {/* <g ref={coupleLegendRef} /> */}\n      <g transform={`translate(${20}, 0)`}>\n        <rect width={160} height={320} x={0} fill={\"#f7ffb0\"}></rect>\n        <g transform={`translate(10, 0)`}>\n          <text x={0} y={25} className=\"font-bold\">\n            Enter Legend\n          </text>\n          {\n            //@ts-ignore\n            [...new Set(data.nodes.map((d) => d.group))]\n              .sort(function (a, b) {\n                return a - b;\n              })\n              .map((d, i) => {\n                return (\n                  <g key={i}>\n                    <g transform={`translate(10, ${i * 25 + 50})`}>\n                      <circle\n                        r={4}\n                        cx={0}\n                        cy={0}\n                        stroke={colorScale(d)}\n                        strokeWidth=\"2\"\n                        fill=\"none\"\n                      />\n                      <text x={16} y={4} key={i} className=\"text-xs\">\n                        Entered on day {d}\n                      </text>\n                    </g>\n                  </g>\n                );\n              })\n          }\n        </g>\n      </g>\n      <g\n        transform={\n          //@ts-ignore\n          // `translate(${width - 200}, 0)`\n          `translate(${width ? width - 200 : 0}, 0)`\n        }\n      >\n        <rect width={160} height={260} x={0} fill={\"#f7ffb0\"}></rect>\n        <g transform={`translate(10, 0)`}>\n          <text x={0} y={25} className=\"font-bold\">\n            Couple Legend\n          </text>\n          {\n            //@ts-ignore\n            [...new Set(data.links.map((d) => d.day))].map((d, i) => {\n              return (\n                <g key={i}>\n                  <g transform={`translate(0, ${i * 25 + 40})`}>\n                    <line\n                      x1={12}\n                      x2={0}\n                      y1={0}\n                      y2={12}\n                      //@ts-ignore\n                      stroke={linkScale(d)}\n                      strokeWidth=\"2\"\n                    ></line>\n                  </g>\n                  <text x={16} y={i * 25 + 52} key={i} className=\"text-xs\">\n                    Coupled on day {d}\n                  </text>\n                </g>\n              );\n            })\n          }\n        </g>\n      </g>\n    </svg>\n  );\n};\n",{"ruleId":"24","severity":1,"message":"25","line":264,"column":6,"nodeType":"26","endLine":264,"endColumn":21,"suggestions":"27"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'centre_x', 'centre_y', 'colorScale', and 'linkScale'. Either include them or remove the dependency array.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [width, height, centre_x, centre_y, linkScale, colorScale]",{"range":"31","text":"32"},[7614,7629],"[width, height, centre_x, centre_y, linkScale, colorScale]"]